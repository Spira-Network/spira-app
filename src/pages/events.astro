---
import Base from '@/layouts/Base.astro'
---

<Base title='Events'>
    <section
        class='grid min-h-screen place-items-center bg-gradient-to-r from-blue-400 from-5% via-amber-300 via-50% to-blue-400 to-95%'>
        <div id='map' class='h-full w-full'></div>
        <!-- <button id='btn-spin'>Pause rotation</button> -->
    </section>

    <script>
        import 'mapbox-gl/dist/mapbox-gl.css'
        import mapboxgl from 'mapbox-gl'

        mapboxgl.accessToken = import.meta.env.PUBLIC_MAPBOX_TOKEN
        const map = new mapboxgl.Map({
            container: 'map',
            center: [-90, 40],
            zoom: 1.5,
        })

        map.on('style.load', () => {
            map.setFog({}) // Set the default atmosphere style
            map.setConfigProperty('basemap', 'lightPreset', 'dusk')
        })

        // The following values can be changed to control rotation speed:

        // At low zooms, complete a revolution every two minutes.
        const secondsPerRevolution = 120
        // Above zoom level 5, do not rotate.
        const maxSpinZoom = 5
        // Rotate at intermediate speeds between zoom levels 3 and 5.
        const slowSpinZoom = 3

        let userInteracting = false
        let spinEnabled = true

        function spinGlobe() {
            const zoom = map.getZoom()
            if (spinEnabled && !userInteracting && zoom < maxSpinZoom) {
                let distancePerSecond = 360 / secondsPerRevolution
                if (zoom > slowSpinZoom) {
                    // Slow spinning at higher zooms
                    const zoomDif = (maxSpinZoom - zoom) / (maxSpinZoom - slowSpinZoom)
                    distancePerSecond *= zoomDif
                }
                const center = map.getCenter()
                center.lng -= distancePerSecond
                // Smoothly animate the map over one second.
                // When this animation is complete, it calls a 'moveend' event.
                map.easeTo({ center, duration: 1000, easing: n => n })
            }
        }

        // Pause spinning on interaction
        map.on('mousedown', () => {
            userInteracting = true
        })

        // Restart spinning the globe when interaction is complete
        map.on('mouseup', () => {
            userInteracting = false
            spinGlobe()
        })

        // These events account for cases where the mouse has moved
        // off the map, so 'mouseup' will not be fired.
        map.on('dragend', () => {
            userInteracting = false
            spinGlobe()
        })
        map.on('pitchend', () => {
            userInteracting = false
            spinGlobe()
        })
        map.on('rotateend', () => {
            userInteracting = false
            spinGlobe()
        })

        // When animation is complete, start spinning if there is no ongoing interaction
        map.on('moveend', () => {
            spinGlobe()
        })

        document.getElementById('btn-spin').addEventListener('click', e => {
            if (e.target instanceof HTMLElement) {
                spinEnabled = !spinEnabled

                if (spinEnabled) {
                    spinGlobe()
                    e.target.innerHTML = 'Pause rotation'
                } else {
                    map.stop() // Immediately end ongoing animation
                    e.target.innerHTML = 'Start rotation'
                }
            }
        })

        spinGlobe()
    </script>

    <style>
        #btn-spin {
            font:
                bold 12px/20px 'Helvetica Neue',
                Arial,
                Helvetica,
                sans-serif;
            background-color: #3386c0;
            color: #fff;
            position: absolute;
            top: 20px;
            left: 50%;
            z-index: 1;
            border: none;
            width: 200px;
            margin-left: -100px;
            display: block;
            cursor: pointer;
            padding: 10px 20px;
            border-radius: 3px;
        }
        #btn-spin:hover {
            background-color: #4ea0da;
        }
    </style>
</Base>
